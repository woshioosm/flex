<?xml version="1.0" encoding="utf-8"?>
<Container:TheCanvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 xmlns:Container="cn.edu.whu.liesmars.Container.*"
					 verticalScrollPolicy="off"
					 horizontalScrollPolicy="off"
					 
					 creationComplete="thecanvas1_creationCompleteHandler(event)"
					 width="626" height="360"   xmlns:services="services.*">
	<fx:Script>
		<![CDATA[
			import cn.edu.whu.liesmars.Container.ParentMDI;
			import cn.edu.whu.liesmars.asPack.event.XZQEvent;
			import cn.edu.whu.liesmars.asPack.util.Config;
			import cn.edu.whu.liesmars.asPack.util.Controller;
			import cn.edu.whu.liesmars.asPack.util.DrawingObj;
			import cn.edu.whu.liesmars.asPack.util.PointOnMap;
			import cn.edu.whu.liesmars.map.MapContainer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import org.liesmars.flashwebclient.GeoEvent.DrawResultEvent;
			import org.liesmars.flashwebclient.Handler.Draw.DrawPoint;
			import org.liesmars.flashwebclient.Handler.Draw.DrawRect;
			
			import spark.events.IndexChangeEvent;
			
			import valueObjects.LayerSet;
			import valueObjects.PlaceQryResult;
			import valueObjects.TPlacename;
			import valueObjects.TRule;
			
			
			
			
			[Embed(source="assets/pencil.png")]
			private var drawHand:Class;
			
			
			private var drawType:String; //地图上勾选的类型
			
			// left="2" right="2" bottom="2" top="2"
			private var queryResult:ArrayCollection=new ArrayCollection();
			
			[Binable]
			private var queryResultShow:ArrayCollection=new ArrayCollection(); // 查询结果地名
			
			[Bindable]
			private var layerNames:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			private var pointsList:ArrayCollection=new ArrayCollection();  //地图勾选坐标列表
			
			[Bindable]
			private var canModifySpace:Boolean=true;
			
			[Bindable]
			private var canEdit:Boolean=true;
			
			[Bindable]
			private var feedBackPlaceName:ArrayCollection=new ArrayCollection(); // 反馈地名
			
			private var listBoxSelectItem:PlaceQryResult;
			
			private var curLayerType:String;
			private var lastX:Number;
			private var lastY:Number;
			private var drawIndex:int=1;
			private var pointIndex:int=1;
			private var drawObj:DrawingObj;
			
			private var newFeacode:String="";
			
			protected function loadLayerNames_resultHandler(event:ResultEvent):void
			{
				layerNames.removeAll();
				Config.layerName=event.result as ArrayCollection;
				for each(var dataset:LayerSet in Config.layerName){
					layerNames.addItem(dataset.layerName);
				}	
				if(cbLayer.text.indexOf("ADM")==0){
					canEdit=false;
				}
				else{
					canEdit=true;
				}
				feedBackPlaceName.removeAll();
				loadFeedBack.token=naturalLangService.loadTplacename();
			}
			public override function loadData():void{
				
				listBoxSelectItem=null;
				if(Config.layerName.length==0)
				{
					loadLayerNames.token=naturalLangService.loadLayerName();	
				}
				else
				{
					layerNames.removeAll();
					for each(var dataset:LayerSet in Config.layerName){
						layerNames.addItem(dataset.layerName);
					}
					feedBackPlaceName.removeAll();
					loadFeedBack.token=naturalLangService.loadTplacename();
				}
				
			}		
			
			
			private function drawResultHandler(event:DrawResultEvent):void{
				
				var resultType:String=event.resultType;
				var state:String=event.state;
				adg1.expandAll();
				if(resultType=="polygon" || resultType=="point" || resultType=="polyline"){
					switch(state){
						case "DrawStart":
							pointIndex=1;
							drawObj=new DrawingObj();
							drawObj.id="范围"+drawIndex;
							var point:PointOnMap=new PointOnMap();
							point.id=pointIndex;
							point.x=event.x;
							point.y=event.y;
							drawObj.children.addItem(point);
							pointsList.addItem(drawObj);
							pointIndex++;
							drawIndex++;
							break;
						case "Drawing":
							var point:PointOnMap=new PointOnMap();
							point.id=pointIndex;
							point.x=event.x;
							point.y=event.y;
							drawObj.children.addItem(point);
							pointIndex++;
							break;
						case "DrawFinished":					
							drawObj.children.removeItemAt(drawObj.children.length-1);
							break;
						default:
							break;
					}
				}
				else if(resultType=="rect"){
					switch(state){
						case "DrawStart":
							pointIndex=1;
							drawObj=new DrawingObj();
							drawObj.id="范围"+drawIndex;
							var point:PointOnMap=new PointOnMap();
							point.id=pointIndex;
							point.x=event.x;
							point.y=event.y;
							lastX=event.x;
							lastY=event.y;
							drawObj.children.addItem(point);
							pointsList.addItem(drawObj);
							pointIndex++;
							drawIndex++;
							break;
						case "DrawFinished":
							var point:PointOnMap=new PointOnMap();
							point.id=pointIndex++;
							point.x=event.x;
							point.y=lastY;
							drawObj.children.addItem(point);
							
							point=new PointOnMap();
							point.id=pointIndex++;
							point.x=event.x;
							point.y=event.y;
							drawObj.children.addItem(point);
							
							point=new PointOnMap();
							point.id=pointIndex++;
							point.x=lastX;
							point.y=event.y;
							drawObj.children.addItem(point);
							
							break;
						default:
							break;
					}
				}
				
			}
			
			public function getLayerType(name:String):String{  //通过图层名获取图层的类型
				for each(var layer:LayerSet in Config.layerName){
					if(layer.layerName==name)
						return layer.layerType;
				}
				return "";
			}
			public function converToCoordstr():String{
				var coords:String="";
				
				for(var k:int=0;k<pointsList.length;k++){
					var points:ArrayCollection=(pointsList.getItemAt(k) as DrawingObj).children;
					var count:int=points.length;
					for(var i:int=0;i<count;i++){
						coords+=(points.getItemAt(i) as PointOnMap).x+","+(points.getItemAt(i) as PointOnMap).y;
						if(i!=count-1&&count!=1)
							coords+=";";
					}
					if(k!=pointsList.length-1)
						coords+="|";
					
				}
				return coords;
			}
			
			protected function queryFeature_resultHandler(event:ResultEvent):void
			{
				CursorManager.removeAllCursors();
				queryResultShow.removeAll();
				queryResult=event.result as ArrayCollection;
				if(queryResult==null||queryResult.length==0){
					mx.controls.Alert.show("结果为空");
				}
				for each(var place:PlaceQryResult in queryResult){
					
					queryResultShow.addItem(place._placeName+"("+place.feaCode+")");
				}
				
			}
			
			/********************************************界面事件*******************************************/
			
			// 多边形绘制
			protected function btnPolygon_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				btnReDraw.enabled=true;
				(Controller.mapContainer as MapContainer).drawPolygon();
				btnPoint.enabled=false;
				btnLine.enabled=false;
				drawType="polygon";
			}
			//拉狂选择
			protected function btnRect_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				btnReDraw.enabled=true;
				(Controller.mapContainer as MapContainer).drawRect();
				btnPoint.enabled=false;
				btnLine.enabled=false;
				drawType="polygon";
			}
			
			//画点
			protected function btnPoint_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				btnReDraw.enabled=true;
				(Controller.mapContainer as MapContainer).drawPoint();
				
				btnPolygon.enabled=false;
				btnRect.enabled=false;
				btnLine.enabled=false;
				drawType="point";
			}
			//画线
			protected function btnLine_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				btnReDraw.enabled=true;
				
				//				var map:MapContainer;
				//				map.drawLine();
				(Controller.mapContainer as MapContainer).drawLine();
				btnPolygon.enabled=false;
				btnRect.enabled=false;
				btnPoint.enabled=false;
				drawType="polyline";
			}
			
			//停止选择
			protected function btnStopDraw_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				(Controller.mapContainer as MapContainer).stopDraw();
				disableAll();
			}
			
			//清空重画
			protected function btnReDraw_clickHandler(event:MouseEvent):void
			{
				
				// TODO Auto-generated method stub
				pointsList.removeAll();
				(Controller.mapContainer as MapContainer).clearMap();
				drawIndex=1;
				pointIndex=1;
				(Controller.mapContainer as MapContainer).initDraw();
			}
			
			//清空
			protected function btnClear_clickHandler(event:MouseEvent):void
			{
				pointsList.removeAll();
				// TODO Auto-generated method stub
				(Controller.mapContainer as MapContainer).clearMap();
				drawIndex=1;
				pointIndex=1;
				(Controller.mapContainer as MapContainer).stopDraw();
			}
			
			
			protected function thecanvas1_creationCompleteHandler(event:FlexEvent):void
			{
				(Controller.mapContainer as MapContainer).geomap.sprite.addEventListener(DrawResultEvent.DRAW_END,drawResultHandler);
				(this.parent as ParentMDI).maximizeRestoreBtn.visible=false;			
				(this.parent as ParentMDI).maximizeRestoreBtn.enabled=false;
				(this.parent as ParentMDI).resizable=false;
			}
			
			
			
			public function startSelectRange(event:MouseEvent):void{
				pointsList.removeAll();
				btnClear_clickHandler(null);
				disableAll();
				curLayerType=this.getLayerType(cbLayer.text);
				switch(curLayerType.toLowerCase()){
					case "point":
						btnPoint.enabled=true;
						break;
					case "multilinestring":
						btnLine.enabled=true;
						break;
					case "linestring":
						btnLine.enabled=true;
						break;
					case "polygon":
						btnPolygon.enabled=true;
						btnRect.enabled=true;
						break;
					case "multipolygon":
						btnPolygon.enabled=true;
						btnRect.enabled=true;
						break;
					case "":
						mx.controls.Alert.show("属性表无法地图编辑");
						
						break;
				}
				btnClear.enabled=true;
				btnStopDraw.enabled=true;
			}
			public function disableAll():void{
				btnPolygon.enabled=false;
				btnRect.enabled=false;
				btnPoint.enabled=false;
				btnStopDraw.enabled=false;
				btnReDraw.enabled=false;
				//btnClear.enabled=false;
				btnLine.enabled=false;
				btnPoint.enabled=false;
			}
			public function qeuryList_click(event:MouseEvent):void{
				Controller.mapContainer.clearMap();
				var i:int=qeuryList.selectedIndex;
				if(i>=0){
					pointsList.removeAll();
					listBoxSelectItem=queryResult.getItemAt(i) as PlaceQryResult;
					var coords:String=listBoxSelectItem._PlaceNameLst;
					if(coords==null||coords=="")
						return;
					btnClear_clickHandler(null);
					var geoType=listBoxSelectItem._GeometryType;
					
					switch(geoType){
						case  "point":
							Controller.mapContainer.drawPointByCoords(coords);
							break;
						case "polyline":
							Controller.mapContainer.drawLineByCoords(coords);
							break;
						case "polygon":
							Controller.mapContainer.drawAreaByCoords(coords);
							break;
					}
					
					
					
					var coordsArray:Array=coords.split('|');
					for(var j:int=0;j<coordsArray.length;j++){
						var drawObj:DrawingObj=new DrawingObj();
						drawObj.id="范围"+(j+1).toString();
						var points:Array=(coordsArray[j] as String).split(';');
						for(var k:int=0;k<points.length;k++){
							var point:PointOnMap=new PointOnMap();
							point.id=k;
							var coord:Array=(points[k] as String).split(',');
							point.x=new Number(coord[0]);
							point.y=new Number(coord[1]);
							drawObj.children.addItem(point);
						}
						pointsList.addItem(drawObj);
					}
				}
				(Controller.mapContainer as MapContainer).stopDraw();
			}
			
			protected function btnAdd_click(event:MouseEvent):void{
				if(txtNewName.text!=""){
					if(cbLayer.text=="ANameTable"){
						disableAll();
						mx.controls.Alert.show("别名表请在地名修改界面中添加");
						return;
					}
					CursorManager.setBusyCursor();
					var a:String=converToCoordstr();
					if(StringUtil.trim(txtNewName.text)==""){
						mx.controls.Alert.show("未输入名称");
						return;
					}
					addFeatureResp.token=naturalLangService.addPlace(cbLayer.text,txtNewName.text,converToCoordstr(),curLayerType,newFeacode,"");
					newFeacode="";
					txtNewName.text="";
					disableAll();
					pointsList.removeAll();
					btnClear_clickHandler(null);
				}
				else 
					mx.controls.Alert.show("新名称不能为空");
			}
			
			public function btnGetPlace_click(event):void{
				listBoxSelectItem=null;
				if(txtQueryName.text!=""){
					CursorManager.setBusyCursor();
					queryFeature.token=naturalLangService.getPlace(txtQueryName.text,cbLayer.text);
				}
				else{
					mx.controls.Alert.show("不能为空");
				}
				
			}
			protected function btnModify_clickHandler(event:MouseEvent):void
			{
				if(listBoxSelectItem==null){
					mx.controls.Alert.show("请先在列表中选择地名");
					return;
				}
				if(rbAName.selected==true){ // 增加新别名
					if(txtNewAName.text==""){
						mx.controls.Alert.show("别名不能为空");
						return;
					}
					CursorManager.setBusyCursor();
					addFeatureResp.token=naturalLangService.addPlace("ANameTable",txtNewAName.text,"","",listBoxSelectItem.feaCode,cbLayer.text);
				}
				else{                    //修改要素 包括别名
					if(txtModifiedName.text!=""){
						CursorManager.setBusyCursor();
						var a:String=converToCoordstr();
						curLayerType=this.getLayerType(cbLayer.text);
						modifyFeatureResp.token=naturalLangService.modifyPlace(cbLayer.text,txtModifiedName.text==""?listBoxSelectItem._placeName:txtModifiedName.text,listBoxSelectItem.feaCode,converToCoordstr(),curLayerType);
						disableAll();
					}
					else 
					{
						mx.controls.Alert.show("不能为空");
						return;
					}
				}
				//listBoxSelectItem=null;
			}
			protected function btnDeleteFeature_clickHandler(event:MouseEvent):void
			{
				
				if(listBoxSelectItem==null){
					mx.controls.Alert.show("请现在列表中选择删除项");
					return ;
				}else{
					CursorManager.setBusyCursor();
					deleteFeatureResp.token=naturalLangService.deleteFeature(cbLayer.text,listBoxSelectItem._placeName,listBoxSelectItem.feaCode);
				}
				listBoxSelectItem=null;
				(Controller.mapContainer as MapContainer).clearMap();
			}
			
			protected function radiobutton1_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if(radiobutton1.selected==true){
					group1.visible=true;
					group2.visible=false;
				}
			}
			
			protected function radiobutton2_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if(radiobutton2.selected==true){
					group2.visible=true;
					group1.visible=false;
				}
				
				
			}
			
			protected function ruleEditResp_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				var result:Boolean=event.result as int;
				if(result==0)
					mx.controls.Alert.show("添加成功");
				else
					mx.controls.Alert.show("添加失败");
				
			}
			
			//地名方式提交
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
				if(StringUtil.trim(txtNewName2.text)==""||StringUtil.trim(txtRuleThenName.text)=="")
				{
					mx.controls.Alert.show("不能为空");
				}
				var newRule:TRule=new TRule();
				newRule.isAdmitted=1;
				newRule.ruleIf=txtNewName2.text;
				newRule.ruleThen="place$"+cbLayer.text+"$"+txtRuleThenName.text;
				newRule.ruleCode="R220206";
				ruleEditResp.token=ruleEditService.saveRule(newRule);
				disableAll();
			}
			//坐标方式提交
			protected function button2_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(StringUtil.trim(txtNewName1.text)=="")
					mx.controls.Alert.show("不能为空");
				var newRule:TRule=new TRule();
				newRule.ruleIf=txtNewName1.text;
				newRule.isAdmitted=1;
				newRule.ruleThen="coord$"+drawType+"$"+converToCoordstr();
				newRule.ruleCode="R220206";
				
				ruleEditResp.token=ruleEditService.saveRule(newRule);
				disableAll();
			}
			
			private var finalNameList:ArrayCollection=new ArrayCollection();
			protected function btnCombine_clickHandler(event:MouseEvent):void
			{
				
				if(StringUtil.trim(txtRulePart.text)==""){
					mx.controls.Alert.show("不能为空");
				}
				finalNameList.addItem(StringUtil.trim(txtRulePart.text));
				txtRulePart.text="";
				bindCombineName();
				
			}
			private function bindCombineName():void{
				txtRuleThenName.text="";
				for(var i:int=0;i<finalNameList.length;i++){
					txtRuleThenName.text+=finalNameList.getItemAt(i);
					if(i!=finalNameList.length-1){
						txtRuleThenName.text+=",";
					}
					
				}
			}
			
			
			
			
			protected function btnBackDelete_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(finalNameList.length==0)
					return ;
				finalNameList.removeItemAt(finalNameList.length-1);
				bindCombineName();
			}
			
			
			protected function btnReset_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				finalNameList.removeAll();
				bindCombineName();
			}
			
			
			
			
			protected function btnStartDraw_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				btnClear_clickHandler(null);
				btnPolygon.enabled=true;
				btnRect.enabled=true;
				btnPoint.enabled=true;
				btnStopDraw.enabled=true;
				btnReDraw.enabled=true;
				btnClear.enabled=true;
				btnLine.enabled=true;
				btnPoint.enabled=true;
				
			}
			
			
			protected function cbLayer_changeHandler(event:ListEvent):void
			{
				
				if(cbLayer.text.indexOf("ADM")==0){
					
					txtNewName.text="";
					newFeacode="";
					canEdit=false;
				}
				else{
					if(canEdit==false){
						txtNewName.text="";
						newFeacode="";
					}
					canEdit=true;
				}
				
				queryResultShow.removeAll();
				listBoxSelectItem=null;
				// TODO Auto-generated method stub
				if(cbLayer.text=="ANameTable"){
					canModifySpace=false;
				}else{
					canModifySpace=true;
				}
				disableAll();
				(Controller.mapContainer as MapContainer).clearMap();
				(Controller.mapContainer as MapContainer).stopDraw();
				
				pointsList.removeAll();
				drawIndex=1;
				pointIndex=1;
//				(Controller.mapContainer as MapContainer).initDraw();
			}
			
			
			protected function rbNewName_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if(rbNewName.selected==true){
					gNewName.visible=true;
					gNewAName.visible=false;
				}
				
			}
			
			
			protected function rbAName_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if(rbAName.selected==true){
					gNewName.visible=false;
					gNewAName.visible=true;
				}
			}
			
			//行政区选择结束处理
			private function xzqChooseFinished(event:XZQEvent):void{
				var curLayer:String= event.XZQLayer;
				var curName:String = event.XZQName;
				newFeacode=event.XZQFeacode;
				txtNewName.text=curName;
				cbLayer.text=curLayer;
			}
			//开始行政区选择
			protected function btnXZQ_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var xzqConfig:XZQconfig=new XZQconfig();
				
				xzqConfig.addEventListener(XZQEvent.XZQCHOOSEDONE,xzqChooseFinished);
				xzqConfig.y=100;
				xzqConfig.x=100;
				PopUpManager.addPopUp(xzqConfig,Config.midCanvs3);
			}
			
			
			protected function addFeatureResp_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				CursorManager.removeAllCursors();
				var boolean:Boolean=event.result as Boolean;
				if(boolean==true)
					mx.controls.Alert.show("添加成功");
				else
					mx.controls.Alert.show("添加失败");
			}
			
			
			protected function modifyFeatureResp_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				CursorManager.removeAllCursors();
				var boolean=event.result as Boolean;
				if(boolean==true)
					mx.controls.Alert.show("修改成功");
				else
					mx.controls.Alert.show("修改失败");
				
			}
			
			protected function deleteFeatureResp_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				CursorManager.removeAllCursors();
				queryResultShow.removeItemAt(qeuryList.selectedIndex);
				listBoxSelectItem=null;
				var boolean=event.result as Boolean;
				if(boolean==true)
				{
					pointsList.removeAll();
					mx.controls.Alert.show("删除成功");
				}
				else
					mx.controls.Alert.show("删除失败");
			}
			
			
			
			
			protected function accordion1_changeHandler(event:IndexChangedEvent):void
			{
				// TODO Auto-generated method stub
				listBoxSelectItem=null;
			}
			
			
		
			
			
			
			//处理后台获得的反馈地名
			protected function loadFeedBack_resultHandler(event:ResultEvent):void
			{
				var result:ArrayCollection=event.result as ArrayCollection;
				for each(var placeName:TPlacename in result){
					feedBackPlaceName.addItem(placeName);
				}
			}
			
			private function chooseFeedback(event:Event):void{
				
			    var place:TPlacename=feedBackList.selectedItem as TPlacename;
				if(place==null)
					return;
				var layerName:String=place.featype;
				var feaName:String=place.standname;
				cbLayer.text=layerName;
			}
		 
            //添加反馈
			protected function button3_clickHandler(event:MouseEvent):void
			{   
				if(feedBackList.selectedItem==null){
					mx.controls.Alert.show("无选中反馈");
					return;
				}
				
				if(cbLayer.text=="ANameTable"){
					disableAll();
					mx.controls.Alert.show("反馈信息不足,别名请在地名修改界面中添加");
					return;
				}
				CursorManager.setBusyCursor();
				
				
				addFeatureResp2.token=naturalLangService.addPlace(cbLayer.text,feedBackList.selectedItem.standname,converToCoordstr(),curLayerType,newFeacode,"");
				newFeacode="";
				disableAll();
				pointsList.removeAll();
				btnClear_clickHandler(null);
					
			}
			protected function addFeatureResp2_resultHandler(event:ResultEvent):void
			{
				CursorManager.removeAllCursors();
				var boolean:Boolean=event.result as Boolean;
				if(boolean==true){
					feedBackList.removeChildAt(feedBackList.selectedIndex);
					mx.controls.Alert.show("添加成功");
				}
				else
					mx.controls.Alert.show("添加失败");
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<services:NaturalLangService id="naturalLangService" destination="NaturalLangService"/>
		<s:CallResponder id="loadLayerNames" result="loadLayerNames_resultHandler(event)"/>
		<s:CallResponder id="queryFeature" result="queryFeature_resultHandler(event)"/>
		<services:RuleEditService id="ruleEditService" destination="RuleEditService"/>
		<s:CallResponder id="ruleEditResp" result="ruleEditResp_resultHandler(event)"/>
		<s:RadioButtonGroup id="radiogroup1"/>
		<s:CallResponder id="addFeatureResp" result="addFeatureResp_resultHandler(event)"/>
		<s:CallResponder id="addFeatureResp2" result="addFeatureResp2_resultHandler(event)"/>
		<s:CallResponder id="modifyFeatureResp" result="modifyFeatureResp_resultHandler(event)"/>
		<s:CallResponder id="deleteFeatureResp" result="deleteFeatureResp_resultHandler(event)"/>
		<s:CallResponder id="loadFeedBack" result="loadFeedBack_resultHandler(event)"/>
	</fx:Declarations>
	<mx:Canvas width="100%" height="100%" fontFamily="微软雅黑">
		<mx:Canvas id="tools" x="276" y="10" width="340" height="62" borderStyle="solid" borderAlpha="0.4">
			<s:Button id="btnPolygon" enabled="false" x="6" y="5" label="多边形勾选范围" fontFamily="微软雅黑" width="105" click="btnPolygon_clickHandler(event)"/>
			<s:Button id="btnRect" enabled="false" x="118" y="5" label="拉框勾选范围" fontFamily="微软雅黑" width="105" click="btnRect_clickHandler(event)"/>
			<s:Button id="btnPoint" enabled="false" x="6" y="35" label="点选地点" fontFamily="微软雅黑" width="75" click="btnPoint_clickHandler(event)"/>
			<s:Button id="btnStopDraw" enabled="false" x="229" y="5" label="停止选择" fontFamily="微软雅黑" width="105" click="btnStopDraw_clickHandler(event)"/>
			<s:Button id="btnReDraw" enabled="false" x="171" y="35" label="撤销重画" width="75" fontFamily="微软雅黑" click="btnReDraw_clickHandler(event)"/>
			<s:Button id="btnClear" enabled="false" x="256" y="35" label="清空" width="75" fontFamily="微软雅黑" click="btnClear_clickHandler(event)"/>
			<s:Button id="btnLine" enabled="false" x="88" y="35" label="线选地点" fontFamily="微软雅黑" width="75" click="btnLine_clickHandler(event)"/>
		</mx:Canvas>
		<s:Label x="15" y="18" text="选取图层:" fontFamily="微软雅黑" fontSize="13" width="64"/>
		<mx:ComboBox id="cbLayer" x="83" y="13" width="175" fontFamily="微软雅黑" dataProvider="{layerNames}" change="cbLayer_changeHandler(event)" />
		
		<mx:AdvancedDataGrid  x="276" y="80" id="adg1" designViewDataType="flat" height="270" width="340" >
			<mx:dataProvider>
				<mx:HierarchicalData source="{pointsList}"
									 childrenField="children" />
			</mx:dataProvider>
			<mx:columns>
				<mx:AdvancedDataGridColumn headerText="序号" dataField="id"/>
				<mx:AdvancedDataGridColumn headerText="X" dataField="x"/>
				<mx:AdvancedDataGridColumn headerText="Y" dataField="y"/>
			</mx:columns>
		</mx:AdvancedDataGrid>
		<mx:Accordion x="14" y="40" width="245" height="310" change="accordion1_changeHandler(event)">
			<s:NavigatorContent label="新增地名" width="100%" height="100%">
				<s:Label x="9" y="58" text="输入添加的地名" fontFamily="微软雅黑"/>
				<s:TextInput editable="{canEdit}"  focusIn=" IME.enabled=true" id="txtNewName" x="7" y="107" fontFamily="微软雅黑" width="201"/>
				<s:Button id="btnAdd" x="10" y="181" label="确认添加" width="77" fontFamily="微软雅黑" click="btnAdd_click(event)"/>
				<s:Button id="StartBtn1" x="9" y="147" label="开始地图选择范围" fontFamily="微软雅黑" click="startSelectRange(event)"/>
				<s:Label x="7" y="15" text="(*新增地名前请先选择图层,行政区添加不用在此选择图层)" fontFamily="微软雅黑" height="33" width="205"/>
				<s:Button x="6" y="77" label="行政区请点此添加地名" width="145" id="btnXZQ" click="btnXZQ_clickHandler(event)"/>
			</s:NavigatorContent>
			
			<s:NavigatorContent label="修改地名" width="100%" height="100%" >
				<s:Label x="3" y="31" text="需更改的地名" fontFamily="微软雅黑"/>
				<s:TextInput  focusIn="IME.enabled=true" id="txtQueryName" x="80" y="27.5" fontFamily="微软雅黑" width="90" height="20"/>
				<s:Button id="btnGetPlace" x="181" y="27" label="查找" width="52" fontFamily="微软雅黑" click="btnGetPlace_click(event)"/>
				<s:Button id="btnModify" x="130" y="191" label="确认提交" fontFamily="微软雅黑" click="btnModify_clickHandler(event)" width="89"/>
				
				<s:List id="qeuryList" x="42" y="57" height="62" width="191" fontFamily="微软雅黑" dataProvider="{queryResultShow}" click="qeuryList_click(event)"></s:List>
				<s:Label x="13" y="60" text="查找结果"  fontSize="12" fontFamily="微软雅黑" width="13" height="55"/>
				<s:Label x="10" y="10" text="(*修改地名前请先选择图层)" fontFamily="微软雅黑"/>
				<s:RadioButton id="rbNewName" x="10" y="125" label="选择并修改新名称" fontFamily="微软雅黑" selected="true" change="rbNewName_changeHandler(event)"/>
				<s:RadioButton id="rbAName" x="140" y="126" label="增加别名" fontFamily="微软雅黑" change="rbAName_changeHandler(event)"/>
				
				<s:Group id="gNewName" x="10" y="148" width="223" height="35" visible="true">
					<s:TextInput  focusIn="IME.enabled=true" id="txtModifiedName" x="51" y="6" width="80" fontFamily="微软雅黑"/>
					<s:Button id="btnModifySpace" x="142" y="7" label="修改范围" visible="{canModifySpace}" fontFamily="微软雅黑" click="startSelectRange(event)" width="79"/>
					<s:Label x="3" y="12" text="新名称" fontFamily="微软雅黑"/>
				</s:Group>
				<s:Group id="gNewAName" x="10" y="148" width="223" height="35" visible="false">
					<s:Label  x="10" y="10" text="输入新别名" fontFamily="微软雅黑"/>
					<s:TextInput id="txtNewAName" x="81" y="5" width="135" fontFamily="微软雅黑"/>
					
				</s:Group>
				<s:Button x="10" y="190" label="删除地名" width="96" id="btnDeleteFeature" click="btnDeleteFeature_clickHandler(event)"/>
			</s:NavigatorContent>
			
			<s:NavigatorContent label="自定义地名" width="100%" height="100%">
				<s:RadioButton id="radiobutton1" x="17" y="4" label="坐标" change="radiobutton1_changeHandler(event)" groupName="radiogroup1" fontFamily="微软雅黑" selected="true"/>
				<s:RadioButton id="radiobutton2" x="92" y="4" label="地名" change="radiobutton2_changeHandler(event)" groupName="radiogroup1" fontFamily="微软雅黑"/>
				<s:Group id="group1" x="10" y="30" width="223" height="183" visible="true">
					<s:TextInput  focusIn="IME.enabled=true" id="txtNewName1" x="12" y="40" width="201" fontFamily="微软雅黑"/>
					<s:Label x="10" y="16" text="输入自定义名称" fontFamily="微软雅黑" width="111" height="13" fontSize="13"/>
					<s:Button id="btnStartDraw" x="9" y="81" label="开始地图勾选" fontFamily="微软雅黑"  click="btnStartDraw_clickHandler(event)"/>
					<s:Button x="25" y="127" label="确认提交" width="170" fontFamily="微软雅黑" click="button2_clickHandler(event)"/>
					<s:Label x="104" y="85" text="(只能勾选一种形状）" fontSize="13"/>
				</s:Group>
				<s:Group id="group2" x="10" y="30" width="223" height="183" visible="false">
					<s:Label x="7" y="96" text="组合内容:" width="55" height="14" fontFamily="微软雅黑"/>
					<s:Label x="6" y="64" text="添加组合项" fontFamily="微软雅黑"/>
					<s:TextInput  focusIn="IME.enabled=true" id="txtRulePart"  x="74" y="58" width="89" fontFamily="微软雅黑"/>
					<s:Button id="btnCombine" x="168" y="59" label="组合" width="48" fontFamily="微软雅黑" click="btnCombine_clickHandler(event)" />
					<s:Button x="57" y="153" label="确定提交" fontFamily="微软雅黑" height="20" width="102" click="button1_clickHandler(event)"/>
					<s:Label x="5" y="6" text="(* 添加地名前 请先选择图层)" fontFamily="微软雅黑" height="12"/>
					<s:TextInput  focusIn="IME.enabled=true" id="txtRuleThenName" editable="false" x="7" y="121" width="209" fontFamily="微软雅黑"/>
					<s:Button id="btnBackDelete" x="69" y="94" label="回删" fontFamily="微软雅黑" height="16" width="42" fontSize="10" click="btnBackDelete_clickHandler(event)"/>
					<s:Button id="btnReset" x="117" y="94" label="清空" fontSize="10" fontFamily="微软雅黑" width="42" height="16" click="btnReset_clickHandler(event)"/>
					<s:Label x="4" y="31" text="输入组合地名" fontFamily="微软雅黑"/>
					<s:TextInput  focusIn="IME.enabled=true" id="txtNewName2" x="82" y="25" width="130" fontFamily="微软雅黑"/>
				</s:Group>
			</s:NavigatorContent>
			
			<s:NavigatorContent label="未审核地名入库" width="100%" height="100%" >
				<s:List x="10" y="34" width="223" height="140" id="feedBackList" dataProvider="{feedBackPlaceName}" labelField="standname" click="chooseFeedback(event)"></s:List>
				<s:Button x="16" y="186" label="地图选择范围"  click="startSelectRange(event)"/>
				<s:Button x="151" y="186" label="确认提交"  click="button3_clickHandler(event)"/>
				<s:Label x="12" y="12" text="未审核地名列表"/>
			</s:NavigatorContent>
			
		</mx:Accordion>
		
	</mx:Canvas>
</Container:TheCanvas>
